/* This source file is part of the Tomviz project, https://tomviz.org/.
   It is released under the 3-Clause BSD License, see "LICENSE". */

#ifndef tomvizPythonConfig_h
#define tomvizPythonConfig_h

// Header file to configure Python environment.

// For development builds: these are paths when running from the build
// directory.
#define PARAVIEW_BUILD_DIR "@ParaView_DIR@"
#define ITK_BUILD_DIR "@ITK_DIR@"
#define TOMVIZ_PYTHON_SOURCE_DIR "@tomviz_python_binary_dir@"
#define TOMVIZ_DATA_SOURCE_DIR "@tomviz_data_DIR@/Data"

// For install builds: these are paths when running from an installed location.
#define TOMVIZ_PYTHON_INSTALL_DIR "@tomviz_python_install_dir@"
#define TOMVIZ_DATA_INSTALL_DIR "@tomviz_data_install_dir@/Data"

#include <string>
#include <vtksys/SystemTools.hxx>

#include "PythonUtilities.h"

namespace tomviz {
void PythonAppInitPrependPythonPath(const std::string& dir)
{
  if (dir != "") {
    std::string collapsed_dir =
      vtksys::SystemTools::CollapseFullPath(dir.c_str());
    if (vtksys::SystemTools::FileIsDirectory(collapsed_dir.c_str())) {
      Python::prependPythonPath(collapsed_dir);
    }
  }
}

//---------------------------------------------------------------------------
void PythonAppInitPrependPathWindows(const std::string& exe_dir)
{
  bool is_build_dir =
    vtksys::SystemTools::FileExists((exe_dir + "/../CMakeCache.txt").c_str()) &&
    vtksys::SystemTools::FileExists(
      (exe_dir + "/../tomvizPythonConfig.h").c_str());
  if (is_build_dir) {
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/bin");
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/lib/site-packages");

    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/lib");
    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/lib/Release");
    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/Wrapping/Generators/Python");
    PythonAppInitPrependPythonPath(ITK_BUILD_DIR
                                   "/Wrapping/Generators/Python/Release");

    // Add tomviz Python source dir.
    PythonAppInitPrependPythonPath(TOMVIZ_PYTHON_SOURCE_DIR);
  } else {
    // since exe_dir in <PREFiX>/bin, we do a  /../
    PythonAppInitPrependPythonPath(exe_dir + "/../" TOMVIZ_PYTHON_INSTALL_DIR);

    PythonAppInitPrependPythonPath(exe_dir + "/../lib/paraview/site-packages");
    PythonAppInitPrependPythonPath(exe_dir +
                                   "/../lib/paraview/site-packages/vtk");
    PythonAppInitPrependPythonPath(exe_dir + "/../lib/itk/site-packages");
  }
}

//---------------------------------------------------------------------------
void PythonAppInitPrependPathLinux(const std::string& exe_dir)
{
  bool is_build_dir =
    vtksys::SystemTools::FileExists((exe_dir + "/../CMakeCache.txt").c_str()) &&
    vtksys::SystemTools::FileExists(
      (exe_dir + "/../tomviz/tomvizPythonConfig.h").c_str());

  if (is_build_dir) {
    // Add ParaView directories.
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/lib");
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/lib/site-packages");

    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/lib");
    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/Wrapping/Generators/Python");

    // Add tomviz Python source dir.
    PythonAppInitPrependPythonPath(TOMVIZ_PYTHON_SOURCE_DIR);
  } else {
    // since exe_dir in <PREFiX>/bin, we do a  /../
    PythonAppInitPrependPythonPath(exe_dir + "/../" TOMVIZ_PYTHON_INSTALL_DIR);

    // Add the location for numpy and scipy
    PythonAppInitPrependPythonPath(exe_dir + "/../lib/python3.7/site-packages");

    // Add root python3.7 dir
    PythonAppInitPrependPythonPath(exe_dir + "/../lib/python3.7");

    // Add the location of python .so libraries
    PythonAppInitPrependPythonPath(exe_dir + "/../lib/python3.7/lib-dynload");
  }
}

//---------------------------------------------------------------------------
void PythonAppInitPrependPathOsX(const std::string& exe_dir)
{
  bool is_build_dir = vtksys::SystemTools::FileExists(
    (exe_dir + "/../../../../CMakeCache.txt").c_str());
  if (is_build_dir) {
    // Add ParaView directories.
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/lib");
    PythonAppInitPrependPythonPath(PARAVIEW_BUILD_DIR "/lib/site-packages");

    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/lib");
    PythonAppInitPrependPythonPath(ITK_BUILD_DIR "/Wrapping/Generators/Python");

    // Add tomviz Python source dir.
    PythonAppInitPrependPythonPath(TOMVIZ_PYTHON_SOURCE_DIR);
  } else {
    // since exe_dir in <PREFiX>/bin, we do a  /../
    PythonAppInitPrependPythonPath(exe_dir + "/../" TOMVIZ_PYTHON_INSTALL_DIR);
    // we don't add anything for ParaView since, ParaView takes care of that.
    PythonAppInitPrependPythonPath(exe_dir + "/../Libraries/");
    PythonAppInitPrependPythonPath(exe_dir +
                                   "/../Libraries/python3.7/site-packages");
    PythonAppInitPrependPythonPath(exe_dir + "/../Python");
    PythonAppInitPrependPythonPath(exe_dir + "/../Python/lib-dynload");
    PythonAppInitPrependPythonPath(exe_dir + "/../Python/site-packages");
  }
}

bool isBuildDir(const std::string& exeDir)
{
#if defined(__APPLE__)
  return vtksys::SystemTools::FileExists(
    (exeDir + "/../../../../CMakeCache.txt").c_str());
#else
  (void)exeDir;
#endif
  return false;
}

std::string PythonInitializationPythonPath()
{
  // Return the PYTHONPATH needed upon initializtion of Python.
  std::string path;
#if defined(__APPLE__)
  path = "/../Python";
#endif
  return path;
}

static void InitializePythonEnvironment(int argc, char** argv)
{
  std::string self_dir, programname;
  if (argc > 0) {
    std::string errMsg;
    if (!vtksys::SystemTools::FindProgramPath(argv[0], programname, errMsg)) {
      // if FindProgramPath fails. We really don't have much of an alternative
      // here. Python module importing is going to fail.
      programname = vtksys::SystemTools::CollapseFullPath(argv[0]);
    }
    self_dir = vtksys::SystemTools::GetFilenamePath(programname.c_str());
  } else {
    self_dir =
      vtksys::SystemTools::GetCurrentWorkingDirectory(/*collapse=*/true);
    programname = self_dir + "/unknown_exe";
  }

#if defined(_WIN32)
  PythonAppInitPrependPathWindows(self_dir);
#elif defined(__APPLE__)
  PythonAppInitPrependPathOsX(self_dir);
#else
  PythonAppInitPrependPathLinux(self_dir);
#endif
}
}

#endif
